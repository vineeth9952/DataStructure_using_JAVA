import java.util.* ;
class Node
{
	int data;
	Node left, right;
	Node(int data)
	{
		this.data = data ;
		this.left = null ;
		this.right = null;
	}
}
public class BinarySearchTree
{
	Node root;
	Node Insertion(Node root, int data)
	{
	    if (root == null)
	        return new Node(data);
	    
	    if(data > root.data)
	        root.right = Insertion(root.right, data);
	    else if (data < root.data)
	        root.left = Insertion(root.left, data);
	   
	    return root;
	}
	Node Search(Node root, int data)
	{
	    if (root==null || root.data == data)
	        return root;
	    
	    if(data > root.data )
	        return Search(root.right, data);
	    else if (data < root.data)
	        return Search(root.left, data);
	        
	    return root;
	}
	Node Deletion(Node root, int data)
	{
	    if (root == null)
	        return root;
	    
	    if(data > root.data)
	        root.right = Deletion(root.right, data);
	    else if (data < root.data)
	        root.left = Deletion(root.left, data);
	    else 
	    {
	        if (root.left == null)
	        {
	            return root.right;
	        }
	        else if (root.right == null)
	        {
	            return root.left = null;
	        }
	        
	        root.data = minValue(root.right);
	        root.right = Deletion(root.right, root.data);
	        
	           
	    }
	    return root;
	}
	int minValue(Node root)
	{
	    int min = root.data;
	    while(root.left != null)
	    {
	        root = root.left;
	        min = root.data;
	    }
	    return min;
	}
	int SumOfNodes(Node root)
	{
	    if (root == null)
	        return 0;
	   
	    return root.data + SumOfNodes(root.left) + SumOfNodes(root.right);
	}
	int HeightOfNode(Node root)
	{
	    if (root == null)
	        return -1;
	   
	    return Math.max(HeightOfNode(root.left), HeightOfNode(root.right)) + 1 ;
	}
    void PreOrderTraversal(Node root)
    {
        if (root == null)
            return;
        System.out.print(root.data+" ");
        PreOrderTraversal(root.left);
        PreOrderTraversal(root.right);
        
    }
    void InOrderTraversal(Node root)
    {
        if (root == null)
            return;
    
        InOrderTraversal(root.left);
        System.out.print(root.data+" ");
        InOrderTraversal(root.right);
        
    }
    void PostOrderTraversal(Node root)
    {
        if (root == null)
            return;
    
        PostOrderTraversal(root.left);
        PostOrderTraversal(root.right);
        System.out.print(root.data+" ");
        
    }
	public static void main(String[] args)
	{
		BinarySearchTree bst = new BinarySearchTree();

		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		while(n != -1)
		{
		    bst.root = bst.Insertion(bst.root,n);
		    n = sc.nextInt();
		}
        
        System.out.print("\nInorder Traversal :- ");
        bst.InOrderTraversal(bst.root);
        
        // bst.root = bst.Deletion(bst.root, 7);
        
        // System.out.print("\nInorder Traversal :- ");
        // bst.InOrderTraversal(bst.root);
        
        System.out.print("\n"+bst.SumOfNodes(bst.root));
        
	}
}
